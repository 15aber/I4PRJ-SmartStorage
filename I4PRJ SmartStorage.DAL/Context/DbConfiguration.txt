
var mainStorage = new Inventory { Name = "Main storage", ByUser = "Dummy", Updated = DateTime.Now, IsDeleted = false };
var bar1 = new Inventory { Name = "Bar 1", ByUser = "Dummy", Updated = DateTime.Now, IsDeleted = false };
var bar2 = new Inventory { Name = "Bar 2", ByUser = "Dummy", Updated = DateTime.Now, IsDeleted = false };
var hostessStation = new Inventory { Name = "Hostess station", ByUser = "Dummy", Updated = DateTime.Now, IsDeleted = false };

var liqureCategory = new Category { Name = "Liquor", ByUser = "Dummy", Updated = DateTime.Now, IsDeleted = false };
var beerCategory = new Category { Name = "Beer", ByUser = "Dummy", Updated = DateTime.Now, IsDeleted = false };
var softDrinkCategory = new Category { Name = "Soft Drink", ByUser = "Dummy", Updated = DateTime.Now, IsDeleted = false };
var champagneCategory = new Category { Name = "Champange", ByUser = "Dummy", Updated = DateTime.Now, IsDeleted = false };

var LiquorSupplier = new Supplier { Name = "Liquor supplier", ByUser = "Dummy", Updated = DateTime.Now, IsDeleted = false };
var beerSupplier = new Supplier { Name = "Beer supplier", ByUser = "Dummy", Updated = DateTime.Now, IsDeleted = false };

var LiquorWholesaler = new Wholesaler
{
  Name = "Liquor wholesaler",
  ByUser = "Dummy",
  Updated = DateTime.Now,
  IsDeleted = false
};

var beerWholesaler = new Wholesaler
{
  Name = "Beer wholesaler",
  ByUser = "Dummy",
  Updated = DateTime.Now,
  IsDeleted = false
};

context.Inventories.AddOrUpdate(i => i.Name, mainStorage, bar1, bar2, hostessStation);

      context.Categories.AddOrUpdate(c => c.Name, liqureCategory, beerCategory, softDrinkCategory, champagneCategory);

      context.Suppliers.AddOrUpdate(s => s.Name, LiquorSupplier, beerSupplier);

      context.Wholesalers.AddOrUpdate(w => w.Name, LiquorWholesaler, beerWholesaler);

      var vodka = new Product
      {
        Name = "Vodka",
        PurchasePrice = 99.95,
        Category = liqureCategory,
        Supplier = LiquorSupplier,
        Updated = DateTime.Now,
        IsDeleted = false
      };

var gin = new Product
{
  Name = "Gin",
  PurchasePrice = 99.95,
  Category = liqureCategory,
  Supplier = LiquorSupplier,
  Updated = DateTime.Now,
  IsDeleted = false
};

var rom = new Product
{
  Name = "Rom",
  PurchasePrice = 99.95,
  Category = liqureCategory,
  Supplier = LiquorSupplier,
  Updated = DateTime.Now,
  IsDeleted = false
};

context.Products.AddOrUpdate(w => w.Name, vodka, gin, rom);

      var roleManager = new RoleManager<IdentityRole>(new RoleStore<IdentityRole>(context));
var userManager = new UserManager<ApplicationUser>(new UserStore<ApplicationUser>(context));
userManager.UserValidator = new UserValidator<ApplicationUser>(userManager)
      {
        AllowOnlyAlphanumericUserNames = false,
        RequireUniqueEmail = true
      };

      if (!roleManager.RoleExists("Admin"))
      {
        var role = new Microsoft.AspNet.Identity.EntityFramework.IdentityRole { Name = "Admin" };
roleManager.Create(role);
      }

      var userInDb = userManager.FindByName("no-reply@smartstorage.dk");

      if (userInDb == null)
      {
        var user = new ApplicationUser
        {
          UserName = "no-reply@smartstorage.dk",
          Email = "no-reply@smartstorage.dk",
          FullName = "Admin",
          PhoneNumber = "12345678",
          ProfilePicture = "/Content/images/rubber-duck.png",
          EmailConfirmed = true,
          LockoutEnabled = false
        };

string userPWD = "SmartStorage2016";

var result = userManager.Create(user, userPWD);

        if (result.Succeeded)
        {
          userManager.AddToRole(user.Id, "Admin");
        }
      }
      else
      {
        userInDb.Email = "no-reply@smartstorage.dk";
        userInDb.FullName = "Admin";
        userInDb.PhoneNumber = "12345678";
        userInDb.ProfilePicture = "/Content/images/rubber-duck.png";
        userInDb.EmailConfirmed = true;
        userInDb.LockoutEnabled = false;

        if (!userManager.IsInRole(userInDb.Id, "Admin"))
        {
          userManager.AddToRole(userInDb.Id, "Admin");
        }
      }
