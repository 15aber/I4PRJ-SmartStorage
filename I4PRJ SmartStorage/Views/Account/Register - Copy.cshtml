@using I4PRJ_SmartStorage.Models
@model I4PRJ_SmartStorage.Models.RegisterViewModel
@{
  ViewBag.Title = "RegisterWizard";
  Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>RegisterWizard</h2>

<div class="wrapper wrapper-content animated fadeInRight">
  <div class="row">
    <div class="col-lg-12">
      <div class="ibox">
        <div class="ibox-title">
          <h5>Wizard with Validation</h5>
          <div class="ibox-tools">
            <a class="collapse-link">
              <i class="fa fa-chevron-up"></i>
            </a>
            <a class="dropdown-toggle" data-toggle="dropdown" href="#">
              <i class="fa fa-wrench"></i>
            </a>
            <ul class="dropdown-menu dropdown-user">
              <li>
                <a href="#">Config option 1</a>
              </li>
              <li>
                <a href="#">Config option 2</a>
              </li>
            </ul>
            <a class="close-link">
              <i class="fa fa-times"></i>
            </a>
          </div>
        </div>
        <div class="ibox-content">
          <div id="wizard">
            @using (Html.BeginForm("Register", "Account", FormMethod.Post, new { @class = "wizard-big", role = "form", id = "form", action = "#" }))
            {
              @Html.AntiForgeryToken()

              <h1>Create a new account.</h1>

              @Html.ValidationSummary("", new { @class = "text-danger" })

              <h2>Account</h2>

              <fieldset>
                <h4>Account Information</h4>
                <div class="row">
                  <div class="col-lg-8">
                    <div class="form-group">
                      @Html.LabelFor(m => m.Username, new { @class = "col-md-3 control-label" })
                      <div class="col-md-9">
                        @Html.TextBoxFor(m => m.Username, new { @class = "form-control" })
                      </div>
                    </div>

                    <div class="form-group">
                      @Html.LabelFor(m => m.Password, new { @class = "col-md-3 control-label" })
                      <div class="col-md-9">
                        @Html.PasswordFor(m => m.Password, new { @class = "form-control" })
                      </div>
                    </div>
                    <div class="form-group">
                      @Html.LabelFor(m => m.ConfirmPassword, new { @class = "col-md-3 control-label" })
                      <div class="col-md-9">
                        @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control" })
                      </div>
                    </div>

                  </div>
                </div>
                <div class="col-lg-4">
                  <div class="text-center">
                    <div style="margin-top: 20px">
                      <i class="fa fa-sign-in" style="font-size: 180px; color: #e5e5e5"></i>
                    </div>
                  </div>
                </div>

              </fieldset>

              <h2>Profile</h2>
              <fieldset>
                <h4>Profile Information</h4>
                <div class="row">
                  <div class="col-lg-6">
                    <div class="form-group">
                      @Html.LabelFor(m => m.Firstname, new { @class = "col-md-3 control-label" })
                      <div class="col-md-9">
                        @Html.TextBoxFor(m => m.Firstname, new { @class = "form-control" })
                      </div>
                    </div>
                    <div class="form-group">
                      @Html.LabelFor(m => m.Middlename, new { @class = "col-md-3 control-label" })
                      <div class="col-md-9">
                        @Html.TextBoxFor(m => m.Middlename, new { @class = "form-control" })
                      </div>
                    </div>
                    <div class="form-group">
                      @Html.LabelFor(m => m.Lastname, new { @class = "col-md-3 control-label" })
                      <div class="col-md-9">
                        @Html.TextBoxFor(m => m.Lastname, new { @class = "form-control" })
                      </div>
                    </div>
                  </div>
                </div>
              </fieldset>

              <h2>Contact</h2>
              <fieldset>
                <h4>Contact Information</h4>
                <div class="row">
                  <div class="col-lg-6">
                    <div class="form-group">
                      @Html.LabelFor(m => m.Username, new { @class = "col-md-3 control-label" })
                      <div class="col-md-9">
                        @Html.TextBoxFor(m => m.Username, new { @class = "form-control" })
                      </div>
                    </div>
                    <div class="form-group">
                      @Html.LabelFor(m => m.Email, new { @class = "col-md-3 control-label" })
                      <div class="col-md-9">
                        @Html.TextBoxFor(m => m.Email, new { @class = "form-control" })
                      </div>
                    </div>
                  </div>
                </div>
              </fieldset>

              <h2>Finish</h2>
              <fieldset>
                <h4>Submit</h4>
                <div class="form-group">
                  <div class="col-md-offset-2 col-md-8">
                    <input type="submit" class="btn btn-primary" value="Register" />
                  </div>
                </div>
              </fieldset>
            }
            </div>
          </div>
      </div>
    </div>

  </div>
</div>

@section Styles {
  @Styles.Render("~/Content/wizardSteps")
}

@section Scripts {
  @Scripts.Render("~/bundles/wizardSteps")
  @Scripts.Render("~/bundles/validate")

  <script type="text/javascript">
    $("#form")
          .steps({
            headerTag: "h2",
            bodyTag: "fieldset",
            contentContainerTag: "formset",
            
            onStepChanging: function (event, currentIndex, newIndex) {
              // Always allow going backward even if the current step contains invalid fields!
              if (currentIndex > newIndex) {
                return true;
              }

              var form = $(this);

              // Clean up if user went backward before
              if (currentIndex < newIndex) {
                // To remove error styles
                $(".body:eq(" + newIndex + ") label.error", form).remove();
                $(".body:eq(" + newIndex + ") .error", form).removeClass("error");
              }

              // Disable validation on fields that are disabled or hidden.
              form.validate().settings.ignore = ":disabled,:hidden";

              // Start validation; Prevent going forward if false
              return form.valid();
            },
            onFinishing: function (event, currentIndex) {
              var form = $(this);

              // Disable validation on fields that are disabled.
              // At this point it's recommended to do an overall check (mean ignoring only disabled fields)
              form.validate().settings.ignore = ":disabled";

              // Start validation; Prevent form submission if false
              return form.valid();
            },
            onFinished: function (event, currentIndex) {
              var form = $(this);

              // Submit form input
              form.submit();
            }
          })
          .validate({
            errorPlacement: function (error, element) {
              element.before(error);
            },
            rules: {
              ConfirmPassword: {
                equalTo: "#Password"
              }
            }
          });

  </script>
}